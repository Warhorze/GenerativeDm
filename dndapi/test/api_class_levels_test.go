/*
D&D 5e API

Testing ClassLevelsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ClassLevelsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClassLevelsAPIService ApiClassesIndexLevelsClassLevelFeaturesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var classLevel float32

		resp, httpRes, err := apiClient.ClassLevelsAPI.ApiClassesIndexLevelsClassLevelFeaturesGet(context.Background(), index, classLevel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClassLevelsAPIService ApiClassesIndexLevelsClassLevelGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var classLevel float32

		resp, httpRes, err := apiClient.ClassLevelsAPI.ApiClassesIndexLevelsClassLevelGet(context.Background(), index, classLevel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClassLevelsAPIService ApiClassesIndexLevelsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.ClassLevelsAPI.ApiClassesIndexLevelsGet(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClassLevelsAPIService ApiClassesIndexLevelsSpellLevelSpellsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var spellLevel float32

		resp, httpRes, err := apiClient.ClassLevelsAPI.ApiClassesIndexLevelsSpellLevelSpellsGet(context.Background(), index, spellLevel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
